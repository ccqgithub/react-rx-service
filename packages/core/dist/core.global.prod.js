var RSCore=function(e,t){"use strict";const s={logLevel:"development"===process.env.NODE_ENV?"info":"error",log:(e,t="info")=>{console&&console[t]&&console[t](e)}},r=(e,t="info",r=!0)=>{if(!r)return;const o=["info","warn","error","never"];o.indexOf(s.logLevel)>o.indexOf(t)||s.log(e,t)},o=Symbol("empty");class i{constructor(){this.$_disposers=[]}beforeDispose(e){this.$_disposers.push(e)}dispose(){this.$_disposers.forEach((e=>{e()}))}}class n{constructor(e=[],t=null){this.parent=null,this.records=new Map,this.parent=t,e.forEach((e=>{let t,s;if("object"==typeof e&&void 0!==e.provide&&(e.useClass||e.useValue))s=e.provide,t={value:e.useValue||null,useClass:e.useClass||null,dispose:e.dispose||null};else{if("function"!=typeof e||"function"!=typeof e.prototype.constructor)throw r(e),new Error("Error provider onfig!");s=e,t={value:null,useClass:e,dispose:null}}this.records.set(s,t)}))}isRegistered(e){return!!this.records.has(e)||!!this.parent&&this.parent.isRegistered(e)}get(e){const t=this.records.get(e);let s;if(t&&!t.value&&t.useClass&&(s=this.$_initClass(t.useClass),t.value=s),!t||!t.value)throw r(e,"error"),new Error("The service not be registered on this injector or any of the parent injector!");return t.value}$_initClass(e){const t=e.prototype.$_getParentInjector||null;e.prototype.$_getParentInjector=()=>this;const s=new e;return s.$_parentInjector=this,s.$_getParentInjector=null,e.prototype.$_getParentInjector=t,s}dispose(){for(const[,e]of this.records){if(!e.value)return;e.dispose?e.dispose(e.value):"function"==typeof e.value.dispose&&e.value.dispose(e.value)}this.parent=null,this.records.clear()}static getParentInjector(e){let t=null;return"object"==typeof e.$_parentInjector?t=e.$_parentInjector:"function"==typeof e.$_getParentInjector&&(t=e.$_getParentInjector(e)),t}}return e.Disposable=i,e.Injector=n,e.Service=class extends i{constructor(e={}){super(),this.displayName="",this.$$={},this.$={},this.$_injector=new n(e.providers||[],n.getParentInjector(this)),this.beforeDispose((()=>{this.$_injector.dispose()})),this.displayName||(this.displayName=this.constructor.name,r(`[Service ${this.displayName}]: For better debugging, you'd better add an attribute 'displayName' to each service class.`,"warn"));const s=e.state||{};Object.keys(s).forEach((e=>{this.$$[e]=void 0===s[e]||s[e]===o?new t.Subject:new t.BehaviorSubject(s[e])}));(e.actions||[]).forEach((e=>{this.$[e]=new t.Subject})),Object.keys(this.$$).forEach((e=>{this.useSubscribe(this.$$[e],{next:t=>{r(`[Service ${this.displayName}]: set new state [${e}].`,"info"),r(t,"info")}})})),Object.keys(this.$).forEach((e=>{this.useSubscribe(this.$[e],{next:t=>{r(`[Service ${this.displayName}]: receive new action [${e}].`,"info"),r(t,"info")}})}))}get state(){const e={};return Object.keys(this.$$).forEach((s=>{this.$$[s]instanceof t.BehaviorSubject&&(e[s]=this.$$[s].value)})),e}useService(e){return this.$_injector.get(e)}useSubscribe(e,...t){const s=e.subscribe(...t);this.beforeDispose((()=>{s.unsubscribe()}))}},e.config=e=>{Object.keys(s).forEach((t=>{void 0!==e[t]&&(s[t]=e[t])}))},e.empty=o,Object.defineProperty(e,"__esModule",{value:!0}),e}({},rxjs);
