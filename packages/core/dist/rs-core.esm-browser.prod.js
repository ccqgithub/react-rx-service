import{BehaviorSubject as e,Subject as s}from"rxjs";const t={logLevel:"error",log:(e,s="info")=>{console&&console[s]&&console[s](e)}},i=e=>{Object.keys(e).forEach((s=>{s in t&&void 0!==e[s]&&(t[s]=e[s])}))},o=(e,s="info",i=!0)=>{if(!i)return;const o=["info","warn","error","never"];o.indexOf(t.logLevel)>o.indexOf(s)||t.log(e,s)};class r{constructor(){this.$_disposers=[]}beforeDispose(e){this.$_disposers.push(e)}dispose(){this.$_disposers.forEach((e=>{e()}))}}class n{constructor(e,s){this._desc=e,this.factory=s?.factory}toString(){return`InjectionToken: ${this._desc}`}}class c{constructor(e=[],s=null){this.parent=null,this.records=new Map,this.parent=s,e.forEach((e=>{let s=null;if("object"==typeof e){const t=e,i=["useValue","useClass","useExisiting","useFactory"];let r=0;i.forEach((e=>{void 0!==t[e]&&r++})),r>1&&o(`These keys [${i.join(",")}] can only use one, other will be ignored!`,"warn");const{useValue:n,...c}=t;s={...c,value:n}}else if("function"==typeof e&&"function"==typeof e.prototype.constructor){s={provide:e,useClass:e}}if(!s)throw o(e),new Error("Error provider onfig!");if(!(void 0!==s.value||s.useClass||s.useExisiting||s.useFactory||s.provide instanceof n&&s.useFactory))throw o(e),new Error("Error provider onfig!");this.records.set(s.provide,s)}))}isProvided(e){return!!this.records.has(e)||!!this.parent&&this.parent.isProvided(e)}get(e,s){const t=this.records.get(e);let i=null;if(t?(void 0===t.value&&this.$_initRecord(t),i=t.value||null):this.parent&&(i=this.parent.get(e,s)),!i&&!s?.optional)throw new Error("Service not be provided, and not optional!");return i}$_initRecord(e){const s={useService:(e,s)=>this.get(e,s)};e.provide instanceof n&&e.provide.factory&&(e.value=e.provide.factory(s)),e.useClass?e.value=new e.useClass(s):e.useExisiting?e.value=this.get(e.useExisiting):e.useFactory&&(e.value=e.useFactory(s))}dispose(){for(const[,e]of this.records){if(!e.value)return;e.dispose?e.dispose(e.value):"function"==typeof e.value.dispose&&e.value.dispose()}this.parent=null,this.records.clear()}}class a extends r{constructor(t={}){super(),this.displayName="",this.$$={},this.$={},this.$e={};const i=t.state||{};Object.keys(i).forEach((s=>{this.$$[s]=new e(i[s])}));(t.actions||[]).forEach((e=>{this.$[e]=new s}));(t.events||[]).forEach((e=>{this.$e[e]=new s})),Object.keys(this.$$).forEach((e=>{this.subscribe(this.$$[e],{next:s=>{o(`[Service ${this.displayName}]: set new state [${e}].`,"info"),o(s,"info")}})})),Object.keys(this.$).forEach((e=>{this.subscribe(this.$[e],{next:s=>{o(`[Service ${this.displayName}]: receive new action [${e}].`,"info"),o(s,"info")}})})),Object.keys(this.$e).forEach((e=>{this.subscribe(this.$e[e],{next:s=>{o(`[Service ${this.displayName}]: emit new event [${e}].`,"info"),o(s,"info")}})}))}get state(){const s={};return Object.keys(this.$$).forEach((t=>{const i=this.$$[t];i instanceof e&&(s[t]=i.value)})),s}subscribe(e,...s){const t=e.subscribe(...s);this.beforeDispose((()=>{t.unsubscribe()}))}}export{r as Disposable,n as InjectionToken,c as Injector,a as Service,i as config,o as debug};
