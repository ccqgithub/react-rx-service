import e,{createContext as t,useContext as s,useCallback as r,useState as n,useEffect as o,useMemo as i}from"react";import{BehaviorSubject as c,Subject as a}from"rxjs";const u={logLevel:"error",log:(e,t="info")=>{console&&console[t]&&console[t](e)}},l=e=>{Object.keys(u).forEach((t=>{void 0!==e[t]&&(u[t]=e[t])}))},h=(e,t="info",s=!0)=>{if(!s)return;const r=["info","warn","error","never"];r.indexOf(u.logLevel)>r.indexOf(t)||u.log(e,t)};class p{constructor(){this.$_disposers=[]}beforeDispose(e){this.$_disposers.push(e)}dispose(){this.$_disposers.forEach((e=>{e()}))}}class d{constructor(e=[],t=null){this.parent=null,this.records=new Map,this.parent=t,e.forEach((e=>{let t,s;if("object"==typeof e&&void 0!==e.provide&&(e.useClass||e.useValue))s=e.provide,t={value:e.useValue||null,useClass:e.useClass||null,dispose:e.dispose||null};else{if("function"!=typeof e)throw h(e),new Error("Error provider onfig!");s=e,t={value:null,useClass:e,dispose:null}}this.records.set(s,t)}))}isRegistered(e){return!!this.records.has(e)||!!this.parent&&this.parent.isRegistered(e)}get(e){const t=this.records.get(e);let s;if(t&&!t.value&&t.useClass&&(s=this.$_initClass(t.useClass),t.value=s),!t||!t.value)throw h(e,"error"),new Error("The service not be registered on this injector or any of the parent injector!");return t.value}$_initClass(e){const t=e.prototype.$_getParentInjector||null;e.prototype.$_getParentInjector=()=>this;const s=new e;return s.$_parentInjector=this,s.$_getParentInjector=null,e.prototype.$_getParentInjector=t,s}dispose(){for(const[,e]of this.records){if(!e.value)return;e.dispose?e.dispose(e.value):"function"==typeof e.value.dispose&&e.value.dispose(e.value)}this.parent=null,this.records.clear()}static getParentInjector(e){let t=null;return"object"==typeof e.$_parentInjector?t=e.$_parentInjector:"function"==typeof e.$_getParentInjector&&(t=e.$_getParentInjector(e)),t}}class f extends p{constructor(e={}){super(),this.displayName="",this.$$={},this.$={},this.$_injector=new d(e.providers||[],d.getParentInjector(this)),this.beforeDispose((()=>{this.$_injector.dispose()})),this.displayName||(this.displayName=this.constructor.name,h(`[Service ${this.displayName}]: For better debugging, you'd better add an attribute 'displayName' to each service class.`,"warn"));const t=e.state||{};Object.keys(t).forEach((e=>{this.$$[e]=new c(t[e])}));(e.actions||[]).forEach((e=>{this.$[e]=new a})),Object.keys(this.$$).forEach((e=>{this.useSubscribe(this.$$[e],{next:t=>{h(`[Service ${this.displayName}]: set new state [${e}].`,"info"),h(t,"info")}})})),Object.keys(this.$).forEach((e=>{this.useSubscribe(this.$[e],{next:t=>{h(`[Service ${this.displayName}]: receive new action [${e}].`,"info"),h(t,"info")}})}))}get state(){const e={};return Object.keys(this.$$).forEach((t=>{e[t]=this.$$[t].value})),e}useService(e){return this.$_injector.get(e)}useSubscribe(e,...t){const s=e.subscribe(...t);this.beforeDispose((()=>{s.unsubscribe()}))}}const $=t(new d),v=t=>{const r=s($),{providers:n=[],children:o}=t,i=new d(n,r);return e.createElement($.Provider,{value:i},o)},b=e=>{const t=s($),r=e=>t.get(e),{provides:n=[]}=e,o=n.map((e=>r(e)));return"function"==typeof e.children?e.children({services:o,getService:r}):e.children};function g(){const e=s($);return r((t=>e.get(t)),[e])}function j(e){return g()(e)}function y(e){const t=g();return e.map((e=>t(e)))}function _(e,t){const[s,r]=n((()=>e instanceof c?e.value:t));return o((()=>{const t=e.subscribe({next:e=>r(e)});return()=>{t.unsubscribe()}}),[e]),s}function m(e,t=!1){const[s,r]=n(null),c=i((()=>e instanceof a&&t&&e.hasError),[e,t]);return o((()=>{if(c)return;const t=e.subscribe({error:e=>{r(e)}});return()=>{t.unsubscribe()}}),[e,c]),s}export{p as Disposable,d as Injector,f as Service,b as ServiceConsumer,$ as ServiceContext,v as ServiceProvider,l as config,g as useGetService,_ as useObservable,m as useObservableError,j as useService,y as useServices};
