import{Injector as r}from"@reactive-service/core";export*from"@reactive-service/core";import e,{createContext as t,useRef as n,useContext as c,useState as o,useEffect as u,useCallback as s,useMemo as i}from"react";import{BehaviorSubject as l}from"rxjs";const b=t(new r),f=t=>{const s=n(!0),i=c(b),{providers:l=[],children:f}=t,[v,a]=o((()=>new r(l,i)));return u((()=>{if(s.current)return void(s.current=!1);const e=new r(l,i);a(e)}),[l,i]),e.createElement(b.Provider,{value:v},f)},v=r=>{const e=c(b);return"function"==typeof r.children?r.children({getService:(r,t)=>e.get(r,t)}):r.children},a=()=>{const r=c(b);return s(((e,t)=>r.get(e,t)),[r])},m=(r,e)=>a()(r,e),p=(r,e)=>{const[t,n]=o(e);return u((()=>{const e=r.subscribe({next:r=>n(r)});return()=>{e.unsubscribe()}}),[r]),t},h=r=>{if(!(r instanceof l))throw new Error("The useBehaviorState can only use with BehaviorSubject!");const[e,t]=o(r.value);return u((()=>{const e=r.subscribe({next:r=>t(r)});return()=>{e.unsubscribe()}}),[r]),e},x=(r,e=null,t={onlyAfter:!0})=>{const[n,c]=o(e);return u((()=>{let e=!1;const n=r.subscribe({error:r=>{t.onlyAfter&&!e||c(r)}});return e=!0,()=>{n.unsubscribe()}}),[r,t.onlyAfter]),n};function d(r,e,t,c){const o=i((()=>"object"==typeof e&&null!==e?e:{next:e,error:t,complete:c}),[e,t,c]),s=n(o);s.current=o,u((()=>{const e=r.subscribe((r=>s.current.next&&s.current.next(r)),(r=>s.current.error&&s.current.error(r)),(()=>s.current.complete&&s.current.complete()));return()=>{e.unsubscribe()}}),[r,s])}export{v as ServiceConsumer,f as ServiceInjector,h as useBehavior,a as useGetService,p as useObservable,x as useObservableError,m as useService,d as useSubscribe};
