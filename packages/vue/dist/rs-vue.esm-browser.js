import{Injector as e,Disposable as t,debug as r}from"@reactive-service/core";export*from"@reactive-service/core";import{defineComponent as s,inject as n,provide as i,reactive as o,readonly as c,getCurrentInstance as u,ref as a,onBeforeUnmount as b}from"vue";import{Subject as h,BehaviorSubject as l}from"rxjs";const f=Symbol("Injector Key"),v=Symbol("Instance Injector Key"),p=s({props:{providers:{type:Object,required:!0}},setup(t){const r=n(f),s=new e(t.providers,r);i(f,s)}});class y extends t{constructor(e={}){super(),this.displayName="",this.$={},this.$e={};const t=o(e.state||{}),s=c(t);this._state=t,this.state=s;(e.actions||[]).forEach((e=>{this.$[e]=new h}));(e.events||[]).forEach((e=>{this.$e[e]=new h})),Object.keys(this.$).forEach((e=>{this.subscribe(this.$[e],{next:t=>{r(`[Service ${this.displayName}]: receive new action [${e}].`,"info"),r(t,"info")}})})),Object.keys(this.$e).forEach((e=>{this.subscribe(this.$e[e],{next:t=>{r(`[Service ${this.displayName}]: emit new event [${e}].`,"info"),r(t,"info")}})}))}setState(e){e(this._state)}subscribe(e,...t){const r=e.subscribe(...t);this.beforeDispose((()=>{r.unsubscribe()}))}}const m=t=>{const r=u(),s=n(f,null),o=new e(t.providers,s);r[v]=o,i(f,o)},w=()=>{const e=u()[v]||n(f,null);return(t,r)=>{if(!e){if(!r||!r.optional)throw new Error("Never register any injector!");return null}return e.get(t,r)}},$=(e,t)=>{const r=u()[v]||n(f,null);if(!r){if(!t||!t.optional)throw new Error("Never register any injectorÃ¥!");return null}return r.get(e,t)},j=(e,t)=>{const r=a(t),s=e.subscribe({next:e=>r.value=e});return b((()=>{s.unsubscribe()})),r},d=e=>{if(!(e instanceof l))throw new Error("The useBehaviorState can only use with BehaviorSubject!");const t=a(e.value),r=e.subscribe({next:e=>t.value=e});return b((()=>{r.unsubscribe()})),t},x=(e,t=null,r={onlyAfter:!0})=>{const s=a(t);let n=!1;const i=e.subscribe({error:e=>{r.onlyAfter&&!n||(s.value=e)}});return n=!0,b((()=>{i.unsubscribe()})),s};function E(e,t){const r=e.subscribe(t);b((()=>{r.unsubscribe()}))}export{y as Service,p as ServiceInjector,d as useBehavior,w as useGetService,m as useInjector,j as useObservable,x as useObservableError,$ as useService,E as useSubscribe};
